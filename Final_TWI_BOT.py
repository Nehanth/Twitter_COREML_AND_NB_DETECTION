{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyMVqZ0u8EvjKlal/yYbKkKQ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/UTD-AIS-Mentorship/nlp-bot-detection-fall-2022/blob/main/Final_TWI_BOT.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "OqFi_eQ7w4L7"
      },
      "outputs": [],
      "source": [
        "###################################################################################\n",
        "#\n",
        "#  tweepy version 3.7.0\n",
        "#  bot.py and last_seen.txt must be in the same folder\n",
        "#  change last_seen.txt to the tweet id b4 the one you want to respond to\n",
        "#  ie if u want to respnd to tweet 4 make sure last_seen.txt is tweet 3's id\n",
        "#  last_seen.txt = 1587982753596731392\n",
        "#\n",
        "#  -HZapperz\n",
        "####################################################################################\n",
        "\n",
        "\n",
        "\n",
        "import tweepy\n",
        "import time\n",
        "import requests\n",
        "import json\n",
        "\n",
        "#naive bayes model\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "from sklearn.metrics import classification_report\n",
        "\n",
        "#training naive bayed model\n",
        "df = pd.read_csv('/content/CleanDataSet.csv', encoding=\"latin-1\")\n",
        "df.isnull()\n",
        "df.isnull().sum().sum()\n",
        "df.dropna(inplace = True)\n",
        "df.describe()\n",
        "df = df.replace((np.inf, -np.inf, np.nan), 0).reset_index(drop=True)\n",
        "df.fillna(0,inplace=True)\n",
        "#print(df.info())\n",
        "#print(df.head())\n",
        "df['bot_or_human'] = df['bot_or_human'].map({'bot': 0, 'human': 1})\n",
        "X = df['text']\n",
        "y = df['bot_or_human']\n",
        "global cv\n",
        "cv = CountVectorizer()\n",
        "X = cv.fit_transform(X) # Fit the Data\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n",
        "#Naive Bayes Classifier\\\n",
        "global clf\n",
        "clf = MultinomialNB()\n",
        "clf.fit(X_train,y_train)\n",
        "clf.score(X_test,y_test)\n",
        "y_pred = clf.predict(X_test)\n",
        "#print(classification_report(y_test, y_pred))\n",
        "\n",
        "\n",
        "#api keys\n",
        "consumer_key = 'K8dLX4dt0MmIRCH1m41nOzr2W'\n",
        "consumer_secret = '1sMbwb8ltjHruk2nfE1qRRMsfUH7mi17j1C4U3feXrfx2OEGpe'\n",
        "key = '1582906439101607937-7gE11jkxeNaQxL8THUsf7lmV9yTenG'\n",
        "secret = 'YPXRQdG0Js3wrzTXgCvZnXvDHGfN4geJ8xPreZKyhlLtL'\n",
        "bearer_token = 'AAAAAAAAAAAAAAAAAAAAAMd4iQEAAAAAI0iMpsZHXkATAG6cpcDw3PWRXD4%3DCP8AvV4iVS4xwMHCBz7akyach8Kqcl9g0wPCMuw6kNI6WTjgqV'\n",
        "\n",
        "\n",
        "#api authorization\n",
        "auth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n",
        "auth.set_access_token(key, secret)\n",
        "api = tweepy.API(auth)\n",
        "\n",
        "#last seen twitter id, to avoid duplicate replies\n",
        "FILE_NAME = '/content/last_seen.txt'\n",
        "\n",
        "\n",
        "#functions to read and write to the last seen id file\n",
        "def read_last_seen(FILE_NAME):\n",
        "    file_read = open(FILE_NAME, 'r')\n",
        "    last_seen_id = int(file_read.read().strip())\n",
        "    file_read.close()\n",
        "    return last_seen_id\n",
        "\n",
        "def store_last_seen(FILE_NAME, last_seen_id):\n",
        "    file_write = open(FILE_NAME, 'w')\n",
        "    file_write.write(str(last_seen_id))\n",
        "    file_write.close()\n",
        "    return\n",
        "\n",
        "\n",
        "#reply functionn",
        "def reply():\n",
        "\n",
        "    counter = 0\n",
        "    for tweet in reversed(tweets):\n",
        "        #only replies to tweets with the #ultimatebot in it\n",
        "        if '#ultimatebot' in tweet.full_text.lower():\n",
        "            \n",
        "            convo_id = analyze_tweet()\n",
        "            #need to change this to the tweet of the conversation ID\n",
        "            url = 'https://api.twitter.com/2/tweets/{}'.format(convo_id)\n",
        "            \n",
        "            tweetNLP = getConvoTweet(url)\n",
        "            #print(tweetNLP)\n",
        "            \n",
        "            #####\n",
        "\n",
        "            df_new = pd.DataFrame([tweetNLP], columns=['text'])\n",
        "            X = df_new['text']\n",
        "          \n",
        "            \n",
        "            #print('X is' + str(type(X)))\n",
        "            \n",
        "            #put the tweet into panda data frame\n",
        "            A = cv.transform(X)\n",
        "            #print(\"A is \" + str(type(A)))\n",
        "            \n",
        "            prediction = clf.predict(A)\n",
        "            #print(B)\n",
        "            #[0] is bot [1] is human\n",
        "            print(f'The tweet predicted is: {tweetNLP} ')\n",
        "            \n",
        "\n",
        "            if (str(prediction) == '[1]'):\n",
        "                result = 'human'\n",
        "            \n",
        "            if (str(prediction) == '[0]'):\n",
        "                result = 'bot'\n",
        "            #send the reply (reply message, tweet id)\n",
        "            \n",
        "            \n",
        "            api.update_status(\"@\" + tweet.user.screen_name + \" This tweet was posted by a \" + result, tweet.id)\n",
        "            \n",
        "\n",
        "            #store the new tweet id\n",
        "            store_last_seen(FILE_NAME, tweet.id)\n",
        "\n",
        "\n",
        "\n",
        "def create_url():\n",
        "    \n",
        "    id = read_last_seen(FILE_NAME)\n",
        "    url = 'https://api.twitter.com/2/tweets?ids={}&tweet.fields=conversation_id'.format(id)\n",
        "    return url\n",
        "\n",
        "def bearer_oauth(r):\n",
        "    \"\"\"\n",
        "    Method required by bearer token authentication.\n",
        "    \"\"\"\n",
        "\n",
        "    r.headers[\"Authorization\"] = f\"Bearer {bearer_token}\"\n",
        "    r.headers[\"User-Agent\"] = \"v2TweetLookupPython\"\n",
        "    return r\n",
        "\n",
        "def connect_to_endpoint(url):\n",
        "    response = requests.request(\"GET\", url, auth=bearer_oauth)\n",
        "    print(response.status_code)\n",
        "    if response.status_code != 200:\n",
        "        raise Exception(\n",
        "            \"Request returned an error: {} {}\".format(\n",
        "                response.status_code, response.text\n",
        "            )\n",
        "        )\n",
        "    return response.json()\n",
        "\n",
        "def getConvoTweet(convoUrl):\n",
        "    response = connect_to_endpoint(convoUrl)\n",
        "    x = json.loads(json.dumps(response))\n",
        "    y = x.get('data')\n",
        "   \n",
        "    return(y.get('text'))\n",
        "\n",
        "#use this function to get the tweet to run through the model\n",
        "def analyze_tweet():\n",
        "    url = create_url()\n",
        "    json_response = connect_to_endpoint(url)\n",
        "    #extracts conversation_id from json file\n",
        "    x = json.loads(json.dumps(json_response))\n",
        "    y = x.get('data')\n",
        "    return (y[0]['conversation_id'])\n",
        "\n",
        "\n",
        "\n",
        "#main\n",
        "while True:\n",
        "    #calls on all timeline mentions (when someone @'s the bot)\n",
        "    tweets = api.mentions_timeline(read_last_seen(FILE_NAME), tweet_mode='extended')\n",
        "\n",
        "    #the reply function\n",
        "    \n",
        "    #print(convo_id)\n",
        "    reply()\n",
        "    \n",
        "    #wait timer b4 next reply\n",
        "    time.sleep(15)\n",
        "\n"
      ]
    }
  ]
}
